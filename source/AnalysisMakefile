.PHONY: settings help merge
.ONESHELL:
SHELL=/bin/zsh

# input files
R1_FILE=$(firstword $(wildcard *_R1_*.fastq.gz))
R2_FILE=$(firstword $(wildcard *_R2_*.fastq.gz))
PREFIX=$(firstword $(subst _, ,$(R1_FILE)))

# executables
SOURCEDIR=~/bio/nijhawanlab/source
GET_REGEXES=$(SOURCEDIR)/get_regexes.py
COUNT_REGEX=$(SOURCEDIR)/count_regex.py
JOIN_MATCHES=$(SOURCEDIR)/join_matches.sh
SEPARATE_MATCHTABLE=$(SOURCEDIR)/separate_matchtable.awk
MERGE_NAMES=$(SOURCEDIR)/merge_names.awk
COUNT_BARCODES=$(SOURCEDIR)/count_barcodes.sh
FLATTEN_SAMPLES=$(SOURCEDIR)/flatten_samples.py
FLASH=flash2 -M 230
BARCHART_GRID=$(SOURCEDIR)/barchart_grid.py
MAKE_BARCHART=$(BARCHART_GRID) --top 10 --experiment $(PREFIX) --control W1 --control W2 --control W3

# input files
BARCODE_PATTERNS_FILE=./barcode_patterns.py
PRIMERS_FILE=./primers.txt
SAMPLES_FILE=./$(PREFIX)_samples.tsv

# Intermediate and result files
MERGED_READS=$(PREFIX)_merged.fastq
PATTERNS=patterns.py
MATCHES=matches.tsv
BARCODE_TABLE=barcode_table.tsv
BARCODE_COUNTS=barcode_counts.tsv
BARCODE_COUNTS_SAMPLES=barcode_counts_samples.tsv
FLAT_SAMPLES=flat_samples.tsv
COUNTS=totals_by_sample.tsv
FLASH_LOG=flash.log
BARCHARTS=$(PREFIX)_barchart.png

MATCHFILE_FWD=matchfile_fwd.tsv
MATCHFILE_REV=matchfile_rev.tsv
MATCHFILE_FWD_RC=matchfile_fwd_rc.tsv
MATCHFILE_REV_RC=matchfile_rev_rc.tsv


INTERMEDIATE_FILES=$(PATTERNS) $(MATCHES) $(BARCODE_TABLE) $(BARCODE_COUNTS) \
	$(BARCODE_COUNTS_SAMPLES) $(FLAT_SAMPLES) $(COUNTS) $(FLASH_LOG) \
	$(MATCHFILE_FWD) $(MATCHFILE_REV) $(MATCHFILE_FWD_RC) $(MATCHFILE_REV_RC)
RESULT_FILES=$(MERGED_READS) $(BARCODE_COUNTS_SAMPLES) $(BARCHARTS)

## all: run all steps necessary to produce the barchart grip
all : $(COUNTS) $(BARCHARTS)

## settings: show the values of variables
settings :
	@echo R1_FILE: $(R1_FILE)
	@echo R2_FILE: $(R2_FILE)
	@echo PREFIX: $(PREFIX)
	@echo
	@echo BARCODE_PATTERNS_FILE: $(BARCODE_PATTERNS_FILE)
	@echo PRIMERS_FILE: $(PRIMERS_FILE)
	@echo SAMPLES_FILE: $(SAMPLES_FILE)
	@echo
	@echo SOURCEDIR: $(SOURCEDIR)
	@echo GET_REGEXES: $(GET_REGEXES)
	@echo COUNT_REGEX: $(COUNT_REGEX)
	@echo JOIN_MATCHES: $(JOIN_MATCHES)
	@echo SEPARATE_MATCHTABLE: $(SEPARATE_MATCHTABLE)
	@echo MERGE_NAMES: $(MERGE_NAMES)
	@echo COUNT_BARCODES: $(COUNT_BARCODES)
	@echo FLATTEN_SAMPLES: $(FLATTEN_SAMPLES)
	@echo FLASH_LOG: $(FLASH_LOG)

## clean: remove intermediate files, leaving barchart.png and merged.fastq
clean :
	rm -f $(INTERMEDIATE_FILES)

## cleanall: remove intermediate and results files, incuding the barchard.png and merged.fastq
cleanall :
	rm -f $(INTERMEDIATE_FILES)
	rm -f $(RESULT_FILES)

## help: show this message
help :
	@grep '^##' ./Makefile

# flash2 -M 230 ../VK022_R1_001.fastq.gz ../VK022_R2_001.fastq.gz 2>&1 | tee flash.log
$(MERGED_READS) : $(R1_FILE) $(R2_FILE)
	$(FLASH) --to-stdout $(R1_FILE) $(R2_FILE) 2>$(FLASH_LOG) >$(MERGED_READS)

## merge: run flash2 to merge the paired reads (R1 & R2 files) into _merged.fastq
merge : $(MERGED_READS)

$(BARCODE_PATTERNS_FILE) : $(SOURCEDIR)/barcode_patterns.py
	cp $(SOURCEDIR)/barcode_patterns.py ./$(BARCODE_PATTERNS_FILE)

$(MATCHFILE_FWD) $(MATCHFILE_REV) $(MATCHFILE_FWD_RC) $(MATCHFILE_REV_RC) $(PATTERNS) : \
	$(PRIMERS_FILE) $(GET_REGEXES) $(SEPARATE_MATCHTABLE)
	$(GET_REGEXES) $(PRIMERS_FILE) --patterns $(PATTERNS) | $(SEPARATE_MATCHTABLE)

$(MATCHES) : $(MERGED_READS) $(PATTERNS) $(BARCODE_PATTERNS_FILE) $(COUNT_REGEX)
	$(COUNT_REGEX) -s $(MERGED_READS) -p $(PATTERNS) -p $(BARCODE_PATTERNS_FILE) -s --out $(MATCHES)

$(BARCODE_TABLE) : $(MATCHES) $(JOIN_MATCHES) $(MERGE_NAMES)
	$(JOIN_MATCHES) < $(MATCHES) | $(MERGE_NAMES) -v FILTER=1 > $(BARCODE_TABLE)

$(BARCODE_COUNTS) : $(BARCODE_TABLE) $(COUNT_BARCODES)
	$(COUNT_BARCODES) < $(BARCODE_TABLE) > $(BARCODE_COUNTS)

$(FLAT_SAMPLES) : $(SAMPLES)
	$(FLATTEN_SAMPLES) $(SAMPLES_FILE) $(FLAT_SAMPLES)

$(BARCODE_COUNTS_SAMPLES) : $(BARCODE_COUNTS) $(FLAT_SAMPLES)
	csvtk join -t --left-join -f "fwd_primer,rev_primer" $(BARCODE_COUNTS) $(FLAT_SAMPLES) > $(BARCODE_COUNTS_SAMPLES)

$(COUNTS) : $(BARCODE_COUNTS_SAMPLES)
	csvtk summary -t -g sample,fwd_primer,rev_primer -f frequency:sum $(BARCODE_COUNTS_SAMPLES) > $(COUNTS)

$(BARCHARTS) : $(BARCODE_COUNTS_SAMPLES) $(BARCHART_GRID)
	$(MAKE_BARCHART) --png $(BARCHARTS) $(BARCODE_COUNTS_SAMPLES)

# # Required input files:
# MERGED_READS=$1
# BARCODE_PATTERNS=barcode_patterns.py
# PRIMERS=primers.txt
# SAMPLES=samples.tsv

# # Intermediate and result files:
# PATTERNS=patterns.py
# MATCHES=matches.tsv
# BARCODE_TABLE=barcode_table.tsv
# BARCODE_COUNTS=barcode_counts.tsv
# BARCODE_COUNTS_SAMPLES=barcode_counts_samples.tsv
# FLAT_SAMPLES=flat_samples.tsv
# COUNTS=totals_by_sample.tsv

# echo "get_regexes.py"
# echo "separate_matchtable.awk"
# $SOURCEDIR/get_regexes.py $PRIMERS --patterns $PATTERNS | $SOURCEDIR/separate_matchtable.awk

# echo "count_regex.py"
# $SOURCEDIR/count_regex.py -s $MERGED_READS -p $PATTERNS -p $BARCODE_PATTERNS -s --out $MATCHES

# echo "join_matches.sh | merge_names.awk"
# $SOURCEDIR/join_matches.sh < $MATCHES | \
#     $SOURCEDIR/merge_names.awk -v FILTER=1 > $BARCODE_TABLE

# echo "Compute barcode counts"
# $SOURCEDIR/count_barcodes.sh < $BARCODE_TABLE > $BARCODE_COUNTS

# echo "Flatten samples table"
# $SOURCEDIR/flatten_samples.py $SAMPLES $FLAT_SAMPLES

# echo "Join with sample names"
# csvtk join -t --left-join -f "fwd_primer,rev_primer" $BARCODE_COUNTS $FLAT_SAMPLES > $BARCODE_COUNTS_SAMPLES

# echo "Compute totals for each sample."
# csvtk summary -t -g sample,fwd_primer,rev_primer -f frequency:sum $BARCODE_COUNTS_SAMPLES > $COUNTS
